# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-04-15 12:14
from __future__ import unicode_literals

import core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('categories', '0001_initial'),
        ('brands', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cTitle', core.models.gotSomethingOutsideTitleParensCharField(db_index=True, help_text='Put the model number or name here -- Bot will search for this in the auction titles.<br/>Optionally, you can put additional description in parentheses ().  While searching auction titles, bot will ignore anything in parentheses.', max_length=48, verbose_name='model number or name')),
                ('cKeyWords', models.TextField(blank=True, help_text='Putting text here is optional, but if there is text here, robot will consider it REQUIRED -- must be found in the title <b>IN ADDITION TO</b> model number or name.<br>Put alternate key words on separate lines -- Bot will know item is for this model if words on any one line match.', null=True, verbose_name='model key words')),
                ('cLookFor', models.TextField(blank=True, help_text='Put nick names, common misspellings and alternate model numbers or names here -- leave blank if Bot only needs to look for the model number or name.<br>Each line is evaluated separately, Bot will know item is in this model if any one line matches.', null=True, verbose_name='Considered a hit if this text is found (optional)')),
                ('iStars', core.models.IntegerRangeField(default=5, help_text='Bot considers when deciding whether to download full description and pictures', verbose_name='desireability, 10 star model is most desireable')),
                ('bGenericModel', models.BooleanField(default=False, help_text='model name/number is used by more than one brand', verbose_name='generic model?')),
                ('bSubModelsOK', models.BooleanField(default=False, help_text='Set to False when you want to track the submodels separately (so you should enter a model record for each submodel)', verbose_name='include sub models (suffix such as A, B, C, etc.)?')),
                ('bMustHaveBrand', models.BooleanField(default=False, help_text='Bot will know item for sale is this model only if Brand name is in the auction title (useful when model name/number is common (example: Model T Ford; "T" is common)', verbose_name='must have brand in aution title?')),
                ('bWanted', models.BooleanField(default=True, help_text='Bot will download full descriptions and pictures only if you do want to track this model', verbose_name='want this model?')),
                ('bGetPictures', models.BooleanField(default=True, help_text='Bot will download pictures only if you want them', verbose_name='want to download pics?')),
                ('bGetDescription', models.BooleanField(default=True, help_text='Bot will download full descriptions only if you do want them', verbose_name='want the description text?')),
                ('cComment', models.TextField(blank=True, null=True, verbose_name='comments')),
                ('cExcludeIf', models.TextField(blank=True, help_text='Bot will know item is <b>NOT</b> of this model if any one line matches (each line evaluated separately, put different exclude tests on different lines)', null=True, verbose_name='Not a hit if this text is found (optional)')),
                ('cRegExLook4Title', models.TextField(null=True)),
                ('cRegExExclude', models.TextField(null=True)),
                ('cRegExKeyWords', models.TextField(null=True)),
                ('cFileSpec1', models.CharField(blank=True, max_length=48, null=True, verbose_name='file path & name for model picture 1')),
                ('cFileSpec2', models.CharField(blank=True, max_length=48, null=True, verbose_name='file path & name for model picture 2')),
                ('cFileSpec3', models.CharField(blank=True, max_length=48, null=True, verbose_name='file path & name for model picture 3')),
                ('cFileSpec4', models.CharField(blank=True, max_length=48, null=True, verbose_name='file path & name for model picture 4')),
                ('cFileSpec5', models.CharField(blank=True, max_length=48, null=True, verbose_name='file path & name for model picture 5')),
                ('iLegacyKey', models.PositiveIntegerField(null=True, verbose_name='legacy key')),
                ('tLegacyCreate', models.DateTimeField(null=True, verbose_name='legacy row created on')),
                ('tLegacyModify', models.DateTimeField(blank=True, null=True, verbose_name='legacy row updated on')),
                ('tCreate', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('tModify', models.DateTimeField(auto_now=True, verbose_name='updated on')),
                ('iBrand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='brands.Brand', verbose_name='Brand')),
                ('iCategory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='categories.Category', verbose_name='Category')),
                ('iUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'ordering': ('cTitle',),
                'db_table': 'models',
                'verbose_name_plural': 'models',
            },
        ),
        migrations.AlterUniqueTogether(
            name='model',
            unique_together=set([('cTitle', 'iBrand', 'iCategory', 'iUser')]),
        ),
    ]
