# -*- coding: utf-8 -*-
# Generated by Django 1.11.20 on 2019-05-05 09:03
from __future__ import unicode_literals

import core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('brands', '0001_initial'),
        ('ebayinfo', '0015_auto_20180804_1929'),
        ('models', '0002_auto_20181216_0720'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('categories', '0002_auto_20180804_1929'),
    ]

    operations = [
        migrations.CreateModel(
            name='ItemFound',
            fields=[
                ('iItemNumb', models.BigIntegerField(primary_key=True, serialize=False, verbose_name='ebay item number')),
                ('cTitle', models.CharField(max_length=80, verbose_name='item title')),
                ('cSubTitle', models.CharField(blank=True, max_length=80, null=True, verbose_name='item sub title')),
                ('cLocation', models.CharField(max_length=48, verbose_name='location')),
                ('cCountry', django_countries.fields.CountryField(max_length=2, verbose_name='country')),
                ('cMarket', models.CharField(max_length=14, verbose_name='market Global ID')),
                ('cGalleryURL', models.CharField(blank=True, max_length=88, null=True, verbose_name='gallery pic URL')),
                ('cEbayItemURL', models.CharField(max_length=188, verbose_name='ebay item URL')),
                ('tTimeBeg', models.DateTimeField(null=True, verbose_name='beginning date/time')),
                ('tTimeEnd', models.DateTimeField(null=True, verbose_name='ending date/time')),
                ('bBestOfferable', models.BooleanField(default=False, verbose_name='best offer enabled?')),
                ('bBuyItNowable', models.BooleanField(default=False, verbose_name='buy it now enabled?')),
                ('cListingType', models.CharField(max_length=15, verbose_name='listing type')),
                ('lLocalCurrency', models.CharField(default='USD', max_length=3, verbose_name='local currency')),
                ('lCurrentPrice', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='current price')),
                ('dCurrentPrice', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='current price (converted to USD)')),
                ('iShippingType', models.PositiveSmallIntegerField(choices=[(0, 'Calculated'), (1, 'Calculated Domestic Flat International'), (2, 'Flat'), (3, 'Flat Domestic Calculated International'), (4, 'Free'), (5, 'Pick Up ONLY!'), (6, 'Freight'), (7, 'Freight Flat'), (8, 'Not Specified')], null=True, verbose_name='shipping type')),
                ('cCategory', models.CharField(max_length=48, verbose_name='primary category')),
                ('c2ndCategory', models.CharField(blank=True, max_length=48, null=True, verbose_name='secondary category (optional)')),
                ('iConditionID', models.IntegerField(blank=True, null=True, verbose_name='condition ID')),
                ('cCondition', models.CharField(blank=True, max_length=28, null=True, verbose_name='condition display name')),
                ('cSellingState', models.CharField(max_length=18, verbose_name='selling state')),
                ('bCancelledItem', models.BooleanField(default=False, verbose_name='Invalid Or Non-Existent Item Number')),
                ('tCreate', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created on')),
                ('tRetrieved', models.DateTimeField(blank=True, null=True, verbose_name='retrieved info')),
                ('tRetrieveFinal', models.DateTimeField(blank=True, null=True, verbose_name='retrieved info after end')),
                ('i2ndCatHeirarchy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='secondary_category', to='ebayinfo.CategoryHierarchy', verbose_name='category hierarchy (secondary)')),
                ('i2ndCategoryID', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ebay_secondary_category', to='ebayinfo.EbayCategory', verbose_name='secondary category ID (optional)')),
                ('iCatHeirarchy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='primary_category', to='ebayinfo.CategoryHierarchy', verbose_name='category hierarchy (primary)')),
                ('iCategoryID', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ebay_primary_category', to='ebayinfo.EbayCategory', verbose_name='primary category ID')),
                ('iEbaySiteID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ebayinfo.Market', verbose_name='ebay site ID (PK)')),
            ],
            options={
                'verbose_name_plural': 'itemsfound',
                'db_table': 'itemsfound',
            },
        ),
        migrations.CreateModel(
            name='ItemFoundTemp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iHitStars', core.models.IntegerRangeField(default=0, null=True, verbose_name='hit stars')),
                ('iStarsModel', core.models.IntegerRangeField(default=1, null=True)),
                ('iStarsBrand', core.models.IntegerRangeField(default=1, null=True)),
                ('iStarsCategory', core.models.IntegerRangeField(default=1, null=True)),
                ('iFoundModelLen', models.PositiveSmallIntegerField(default=0)),
                ('cWhereCategory', models.CharField(default='title', max_length=10, verbose_name='where category was found')),
                ('iBrand', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='brands.Brand')),
                ('iCategory', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='categories.Category')),
                ('iItemNumb', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='searching.ItemFound')),
                ('iModel', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='models.Model')),
            ],
            options={
                'verbose_name_plural': 'itemsfoundtemp',
                'db_table': 'itemsfoundtemp',
            },
        ),
        migrations.CreateModel(
            name='Search',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cTitle', models.CharField(max_length=38, null=True, verbose_name='short description')),
                ('cKeyWords', models.TextField(blank=True, help_text='What you type here will go into the ebay serch box -- mulitple terms will result in an AND search.  TIPS: to exclude words, put a - in front (without any space), search for red OR green handbags as follows: handbags (red,green)  search for handbags but exclude red and green as follows: handbags -(red,green)  350 characters MAX', max_length=350, null=True, verbose_name='search for key words (maximum length 350 characters)')),
                ('iDummyCategory', models.PositiveIntegerField(blank=True, help_text='Limit search to items listed in this category -- (key words OR ebay category required!)', null=True, verbose_name='ebay category number')),
                ('cPriority', models.CharField(help_text='high priority A1 A2 A3 ... Z9 low priority', max_length=2, null=True, verbose_name='processing priority')),
                ('tBegSearch', models.DateTimeField(null=True, verbose_name='last search started')),
                ('tEndSearch', models.DateTimeField(null=True, verbose_name='last search completed')),
                ('cLastResult', models.TextField(null=True, verbose_name='last search outcome')),
                ('tCreate', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('tModify', models.DateTimeField(auto_now=True, verbose_name='updated on')),
                ('iEbayCategory', models.ForeignKey(blank=True, help_text='Limit search to items listed in this category -- (key words OR ebay category required!) (Both are OK)', null=True, on_delete=django.db.models.deletion.CASCADE, to='ebayinfo.EbayCategory', verbose_name='ebay category (optional)')),
                ('iUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name_plural': 'searches',
                'db_table': 'searching',
                'ordering': ('cTitle',),
            },
        ),
        migrations.CreateModel(
            name='SearchLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tBegSearch', models.DateTimeField(db_index=True, verbose_name='search started')),
                ('tEndSearch', models.DateTimeField(null=True, verbose_name='search completed')),
                ('tBegStore', models.DateTimeField(null=True, verbose_name='processing started')),
                ('tEndStore', models.DateTimeField(null=True, verbose_name='processing completed')),
                ('iItems', models.PositiveIntegerField(null=True, verbose_name='items found')),
                ('iStoreItems', models.PositiveIntegerField(null=True, verbose_name='items stored')),
                ('iStoreUsers', models.PositiveIntegerField(null=True, verbose_name='stored for owner')),
                ('iItemHits', models.PositiveIntegerField(null=True, verbose_name='have category, brand & model')),
                ('cResult', models.TextField(null=True, verbose_name='search outcome')),
                ('iSearch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='searching.Search', verbose_name='Search that first found this item')),
            ],
            options={
                'verbose_name_plural': 'searchlogs',
                'db_table': 'searchlogs',
            },
        ),
        migrations.CreateModel(
            name='UserItemFound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iHitStars', core.models.IntegerRangeField(db_index=True, default=0, null=True, verbose_name='hit stars')),
                ('bGetPictures', models.BooleanField(default=False, verbose_name='get description & pictures?')),
                ('tLook4Hits', models.DateTimeField(null=True, verbose_name='assessed interest date/time')),
                ('cWhereCategory', models.CharField(default='title', max_length=10, verbose_name='where category was found')),
                ('bListExclude', models.BooleanField(default=False, verbose_name='exclude from listing?')),
                ('tGotPics', models.DateTimeField(blank=True, null=True, verbose_name='got pictures')),
                ('bAuction', models.BooleanField(default=False, verbose_name='Auction or Auction with Buy It Now')),
                ('tCreate', models.DateTimeField(db_index=True, verbose_name='created on')),
                ('tModify', models.DateTimeField(auto_now=True, verbose_name='updated on')),
                ('tRetrieved', models.DateTimeField(blank=True, null=True, verbose_name='retrieved info')),
                ('tRetrieveFinal', models.DateTimeField(blank=True, null=True, verbose_name='retrieved info after end')),
                ('iBrand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='brands.Brand', verbose_name='Brand')),
                ('iCategory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='categories.Category', verbose_name='Category')),
                ('iItemNumb', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='searching.ItemFound')),
                ('iModel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='models.Model', verbose_name='Model Name/Number')),
                ('iSearch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='searching.Search', verbose_name='Search that first found this item')),
                ('iUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name_plural': 'useritemsfound',
                'db_table': 'useritemsfound',
            },
        ),
        migrations.AddField(
            model_name='itemfoundtemp',
            name='iSearch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='searching.Search', verbose_name='Search that first found this item'),
        ),
        migrations.AlterUniqueTogether(
            name='useritemfound',
            unique_together=set([('iItemNumb', 'iUser', 'iModel', 'iBrand')]),
        ),
        migrations.AlterUniqueTogether(
            name='search',
            unique_together=set([('iUser', 'cTitle'), ('iUser', 'cKeyWords', 'iEbayCategory'), ('iUser', 'cPriority')]),
        ),
    ]
